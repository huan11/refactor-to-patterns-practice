// 下面演示了 通过访问者模式，解决了抽象资源文件解析的问题：
// 1. 通过在资源里面定义 accept 方法，将解析器传递给资源文件，资源文件再调用解析器的方法，同时把自身this 具体类型也传递过去
// 客户端在处理资源的时候，不是直接调用工具去处理资源，而是调用资源的 accept 方法，传递解析器，解析器再调用资源的方法，这样就可以根据不同的资源类型，调用不同的解析方法

Step1 在资源里面定义一个接收 解析当前对象的方法 accept

public abstract class ResourceFile {
    // ....
    abstract public void accept(Extractor extractor);
}

Step2 用户使用的时候, 对资源进行操作的时候，调用资源的 accept 方法，传入解析器

public static void main(String[] args) {
    Extractor extractor = new Extractor();
    List<ResourceFile> resourceFiles = listAllResourceFiles(args[0]);
    for (ResourceFile resourceFile : resourceFiles) { // 解析器extractor作为参数传给 resource
        resourceFile.accept(extractor);
    }
}

Step3 解析器里面都是重载的方法，根据不同的资源类型，调用不同的解析方法
public class Extractor {
  public void extract2txt(PPTFile pptFile) {}

  public void extract2txt(PdfFile pdfFile) {}

  public void extract2txt(WordFile wordFile){}
}

Step4 关键点，不同资源调用的解析器的时候，传递 this 类型进去，这样就可以调用不同的解析方法
public class PPTFile extends ResourceFile {
    @Override
    public void accept(Extractor extractor) {
        extractor.extract2txt(this);
    }
}